INFO: elide: Text.ElideRight - gryzie się z ToolTip

na później: 
	ścieżka główna 
	drag and drop file
	AddTag w EditSong i AddSong



DONE dodać walidację formularza dodawania edytowania itd
DONE poprawić triswitch żeby można płynnie zmieniać wartości
DONE POPRAWIĆ EDIT TAG, bo nie działa dobrze (dla edytowalnych tagów)DONE dodać kod w add/update song do dodawania wartości w tabeli songs_tags
DONE ogarnąć dodawanie statystyk jak add date i analizaowanie pliku piosenki jak duration w add song 
DONE !!! dodać ucinanie nadmiarowago tekstu wszędzie
DONE zrobić jeśli się da wyświetlanie ToolTip po najechaniu na nazwę uciętego testu
DONE MOŻNA dodać argumenty do signal w celu przekazania jaki błąd się pojawił
DONE dodać model loaded i dopiero na sygnał otwierać nowe strony a na error otwierać popup
DONE można przerobić addSong, addTag, editTag tak jest zrobione editSong (dodawanie elemtów tablicy na start)
DONE updatować popupy zgodnie z PopupDeleteSongConfirm i/lub PopupFormSublitError
DONE poprawić dodawanie i odczytywanie ścieżek plików w add/update song
- zintegrować ścieżki wraz z główną podsiężką:
- 	sprawdzić czy należą do ścieżki (są pod ścieżką ścieżki głównej "db_songs_main_path")
- 	usunąć część głównej ścieżki w nowo dodanych ścieżkach piosenek
- ustawić kolory dla deleteSongDelegate oraz deleteTagDelegate
DONE obsłużyć interakcję z użytkownikiem jeżeli zawali ograniczenie UNIQUE w tag title lub song (title, path...)
- podejrzeć zrobione funkcje robiąc (display models lists) czy innych dla: loadPlaylistSongs
DONE dodać eksportowanie danych do json (może importowanie)
DONE FIX white theme with popups
- ? dodać żeby z stałych tagów, tam gdzie są wartości dla piosenek można było przejść do każdej pojedynczej Edit Song
DONE Sprawdzić czy są jakieś problemy z ponowną initDatabase w Database
DONE USUNĄĆ DATABASE W METODZIE deleteDatabase()
- ? dodać napis "song list is empty" oraz "tag list is empty" w Songs.qml oraz Tags.qml gdy nie ma elementów do wyświetlenia
- ? dodać skrolowanie z powrotem do momentu na liście w którym był użytkownik po np usunięciu tagu/piosenki i tym podobne
- ? zmienić wyświetlanie tej linii która jest między włąściwościami tagu a piosenkami w EditTag.qml żeby jakoś sygnalizowało że o to chodzi, bo gdy nie ma piosenek w liscie to to wygląda dziwnie, jak by jakieś oddzielenie właściwości tagu od Delete Tag
DONE dodać testowanie (w addSong, editSong itd) czy nazwa i ścieżki są unikalne w trakcie dodawania (nowy sygnał emitowany na przykład, ale nie wiem czy nie wykorzystać tamtego):
DONE 	-piosenek
DONE 	-tagów
DONE dodać zamiast console.log otwieranie popupów
DONE dodać "delete tag" wewnątrz edit Tag
DONE dodać delete icon w liscie tags
DONE dodać delete icon w liscie songs
DONE dodać w editTag dla taga add date daty a nie liczby


----------- ----------- przejście na jednolite tagi ----------- -----------

- zobaczyć jakie sygnały są zbędne i nie używane
DONE przerobić QList<Tag/Song *> na nowe klasy TagList oraz SongList zawierające odpowiednio QList<Tag *> QList<Song *>
DONE przerobić song_id na id w SongDetails
-  ? pomyśl nad przerobieniem wszystkich bool na int
	- odśwież .arg w metodach debugPrintModel tak żeby więcej w jednym było 
DONE MODELE POTRZEBUJĄ KOLEJNOŚCI 
DONE w add song dodać sprawdzanie czy ścieżka path, jest unique
- ustawienie author w trakcie dodawania piosenki (jeżeli nie jest ustawiony)
- przy importowaniu piosenek po ich załadowaniu w importSongsDatabase będzie informacja ile piosenek zostanie dodanych, ile nowych tagów (bez opisu) zostanie dodanych a ile piosenek zostanie pominiętych
- w podsumowaniu (popup) będzie TextField z podsumowaniem które pominięto
- przy importowaniu tagów po ich załadowaniu w importTagsDatabase będzie informacja ile tagów zostanie dodanych, ile tagów zostanie nadpisanych
- w podsumowaniu (popup) będzie TextField z podsumowaniem które nadpisano
- trzeba sprawdzić czy użytkownik nie edytuje stałych tagów
DONE AddTag przepisać na nowy tryb zarządzania tablicą
DONE otoczyć transaction i commit całe addSong, editSong czy addTag ... bo tam najpierw się dodaje element a później się tworzy połączenia i ustawia wartości
- dodać placeholder/opis pod że zostawienie title default ustawi tytuł pliku 
DONE ustawić popupy dla Songs.qml i Tags.qml
DONE dodać import songs 
Poprawić popupy które nie powinny się zamykać na kiknięcie po za nie
DONE ustawić personalizację dla zapisywania pozycji listy
- testowanie unikalności przy edycji tagów unikalnych (song path)
DONE poprawić personalizations.qml
DONE poprawić file select delegate
- zmienić nazewnictwo w klasie personalizations i w miejscach połączonych
- ? poprawić ikonkę w select file i path
DONE ZROZMIEĆ FileSelectField.qml oraz PathSelectField.qml
- przerobić footery w listach
- przerobić na lepsze sprawdzanie (takie jak w playlist) obsługę zapisywania scrollowania list
- przerobić teksty w komponentach "delegate" na LeftTextInList
- przebudować importDatabase na importTagsToDatabase i importSongsToDatabase
- ? przerobić zakończenia dla tekstów nie będących na buttonach
- ? przerobić zakończenia dla tekstów będących na buttonach
- query.log
- add tag type

=================================================
DONE - import tags from json
DONE - import songs from json
DONE - export tags to json
DONE - export songs to json
DONE - make own icons
DONE - clean up icons
? dodać Backend.personalization.showTooltips w ImageButton:90
DONE - zmienić Image w FileSelectField na ImageButton
DONE - sprawdzić czy PathSelectField jest używany
- dodać opis info do niektórych
DONE - błąd z add date i update date w dodawaniu nowej piosenki ????
NONE ? dodać do BetterButton ikonki
- pozmienić w headerach TabButton na BetterButton
DONE - dodać weryfikację czy playlist model jest załadowany poprawnie, jak nie załadować playlist (żeby sprawdzić można wykomentować inicjalizację db w backend)
- w initializeFilters dodać personalization
DONE ### przetestować co się stanie gdy przy example data utworzymy tag X i importujemy 2 piosenki ale bez tagu X a następnie wyeksportujemy wszystkie dane (w tych dwóch nowych tagach nie powinno być tagu X) a to znaczyło by że nie tworzy się element który nie zostanie określony w pliku json w trakcie importowania
DONE - dodać ładowanie w moemncie importowania i exportowania danych
- usunąć niepotrzebne get/set dla m_songState w Playlist
- dodać ostrzeżenie o Begin > End  oraz o Begin > Duration lub End > Duration

==========================
// tak się teraz zastanawiam co zrobić z filtrami, można je zainicjalizować (domyślnie albo z personalization) oraz zmienić czy zapisać. Jednak co w przypadku gdy użytkownik doda nowe tagi
// początkowo myślałem, żeby zrobić że załadują się domyślne wartości 'do not compare' w tagach a następnie będziemy podmieniać te które pasują np: 
// mamy listę A oraz chcemy załadować nową listę
//	 x belong to A oraz x not belong to B => pomijamy
//	 x not belong to A oraz x belong to B => ustawiamy na domyślną 'do not compare'
// ale się tak teraz zastanawiam jak ugryźć (i czy wgl dam radę to zrobić) zarządzanie pamięcią m_filters oraz m_filersModel. Może zamiast pisać to wyjaśnienie powinienem próbować to zaprogramować -.-
... kiepskie jest to, że importując tagi nie można dodać jakie piosenki będą miały jaką wartość dla niego, ale wychodzi, że to jest najprostrze rozwiązanie i cóż
DONE - Dodać noSongThumbnailLight
DONE - funkcjonalny slider dla player
DONE - zmaina głośności
- lepsze delegate w playlist
- sprawdzić co spowalnia ładowanie playlisty
- obsłużyć player/wyświetlanie playera gdy playlist jest puste
- naprawić begin oraz end w player, bo nie działa prawidłowo
- dodać liczbę czasu piosenki oraz liczbę obecnej pozycji (w minutach/sekundach) pod sliderem


Zdarzenia playlist:
reaload() -> zatrzymanie playera, załadowanie piosenek, changePlayingSongsData
reload = wciśnięcie przycisku reload
shuffle = wciśnięcie przyckisku shuffle
ended = zakończenie odtwarzania piosenki przez Player
case:
	odtwarza się pierwsza piosenka
		piosenek jest 1 -> currentSongPos = 0, nextSongPos = 0
			reload -> reload()
			shuffle -> currentSongPos = 0, nextSongPos = 0
			ended -> currentSongPos = 0, nextSongPos = 0

		piosenek jest 2 -> currentSongPos = 0, nextSongPos = 1
			reload -> reload()
			shuffle -> currentSongPos = getSongPosByID(currentSongID), nextSongPos = 0
			ended -> currentSongPos = 1, nextSongPos = 0

		piosenek jest n -> currentSongPos = 0, nextSongPos = 1, n>2
			reload -> reload()
			shuffle -> currentSongPos = getSongPosByID(currentSongID), nextSongPos = 0
			ended -> currentSongPos = 1, nextSongPos = 2

	odtwarza się druga piosenka
		piosenek jest 2 -> currentSongPos = 1, nextSongPos = 0
			reload -> reload()
			shuffle -> currentSongPos = getSongPosByID(currentSongID), nextSongPos = 0
			ended -> currentSongPos = 0, nextSongPos = 1

		piosenek jest n -> currentSongPos = 1, nextSongPos = 2, n>2
			reload -> reload()
			shuffle -> currentSongPos = getSongPosByID(currentSongID), nextSongPos = 0
			ended -> currentSongPos = 2, nextSongPos = 3

	odtwarza się k-ta piosenka, k>2 i n>k
		piosenek jest n -> currentSongPos = k, nextSongPos = k+1, n>2
			reload -> reload()
			shuffle ->  currentSongPos = getSongPosByID(currentSongID), nextSongPos = 0
			ended -> currentSongPos = k+1, nextSongPos = k+2

	odtwarza się ostatnia piosenka
		piosenek jest n -> currentSongPos = n-1, nextSongPos = 0, n>2
			reload -> reload()
			shuffle ->  currentSongPos = getSongPosByID(currentSongID), nextSongPos = 0
			ended -> currentSongPos = 0, nextSongPos = 1

inicjalizacja:
dane:
	Player:
		m_player - zainicjalizoway ale pusty
		m_audioOutput - zainicjalizoway ale pusty
		m_song - zainicjalizoway ale pusty
		m_playerStarted = false		
akcje:
	1. Playlist: 
		ładuje playlistę, 
		miesza ją, 
		ustawia zmienne songState 
			na {-1,-1,-1} gdy playlist jest pusty,
			na {0, ?, 0} gdy playlist posiada 1 piosenkę,
			na {0, ?, 1} gdy playlist posiada więcej niż 1 piosenkę
		buduje model playlist,
		ładuje obecną piosenkę dla Player jeżeli jest różna od -1
	2. Player:
		jeżeli nie załadowano piosenki to czekamy na ponowne załadowanie playlisty więc fakt, że nie została zainicjalizowana nam nie przeszkadza (bo przy reload i tak resetujemy)
		po załadowaniu kopiujemy jej dane i ustawiamy flagę (bool), że załadowano. w tym momencie jest wskazana piosenka ale nie została jeszce puszczona 


==========================
playlist:
1. po kliknięciu shuffle(to zmieniające kolejnosć piosenek) w momencie którym będzie jakaś lecieć, to po jej zakończeniu/wciśnięciu next odpali się pierwsza z playlisty
2. po zakończeniu ostatniego kawałka zostanie przetosowana na nowo | 2. po zakończeniu ostatniego kawałka, playlista zacznie się od nowa
3. po zmianie filtrów również nie przerywa piosenki ale następną jaką puści będzie ta z listy
4. jak playlista będzie pusta a piosenka która gra się zakończy to player restartuje obecną piosenkę na początek i zatrzymuje
5. filtry mają się zapisać razem z personalizations

A. ZMIENIANIE PIOSENEK - w momencie zakończenia piosenki Player zapyta Playlist o następną, Playlist zwróci mu następna w kolejce (Playlist będzie miał wskaźnik na obecną piosenkę), i Player ją odtworzy
B. USTAWIANIE FILTRÓW - po zapisaniu filtrów Database dostaje informacje jakich piosenek szukać, Database pobiera z bazy danych listę piosenek odpowiadających zagadnieniom, Database ładuje model dla playlistListView, Database wysyła do Playlist listę piosenek,
C. ŁADOWANIE MODELU - Database ładuje model gdy wchodzi się pierwszy raz do PlaylistView oraz ładuje za każdym razem gdy zostaną zmienione filtry (listę trzyma w pamięci żeby nie ładować ponownie)
D. SONG DETAILS W PLAYLIST VIEW - Database ładuje piosenkę dokładnie tak jak w EditSong 
